class Room

  attr_accessor(:name, :description, :isLocked)

  def initialize(name, description, room_id)
    @name = name
    @description = description
    @isLocked = false
  end

end

class Game

#  generating the rooms

  @cell1 = Room.new("Your Cell", "It's a dirty room with no windows. It contains a bed, chair and desk. There's a mouse in the corner of the room\n\n")
  @cell2 = Room.new("Cell 2", "It's the prison cell next to yours. It's the same as yours but there's a female prison inside\n\n")
  @cell3 = Room.new("Cell 3", "It's the prison cell opposite yours. There's nothing in it except a bed, chair and desk\n\n")
  @prison_hallway = Room.new("the Prison Hallway", "You are in the prison hallway. There's your cell and two others. At the end sits a prison guard. The prison guard is asleep\n\n")

# initial game state
  @game_complete = false
  @rooms = [@cell1, @cell2, @cell3, @prison_hallway].freeze
  @current_room_index = 2

  def current_room 
    @rooms[@current_room_index]
  end

# Starting game

  while @game_complete == false

    puts "You are in #{current_room.name}"
    puts "Where you like to move to?"

    # we need to print out all of the room names except for the one that we are currently in with numbers

    @rooms.each_with_index do |room, number|
      puts "[#{number + 1}] #{room.name}" unless number == @current_room_index
    end

    # get input as a number and up @current_room_index with the new room index number 

    @input = gets.chomp
    @current_room_index = @input.to_i - 1
    
    # print out message confirming that they have moved room

    puts "You have moved to #{current_room.name}"
    puts "#{current_room.description}"

    if @input == "q"
      @game_complete = true 
    end

  end

end


play = Game.new
play
