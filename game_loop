class Room

  attr_accessor(:name, :description, :isLocked)

  def initialize(name, description, isLocked)
    @name = name
    @description = description
    @isLocked = isLocked
  end

end

class Item
  attr_accessor(:name, :description, :item_id, :canBePickedUp, :isPickedUp)

  def initialize(name, description, item_id, canBePickedUp)
    @name = name
    @description = description
    @item_id = item_id
    @canBePickedUp = canBePickedUp
    @isPickedUp = false
  end
end

# current room method to call the room the player is in 

def current_room 
  @rooms[@current_room_index]
end

def pause(input)
  $stdout.flush
  sleep input
end
# player move code

def player_move
  puts "\n"
  puts "Where would you like to move to?\n\n"
  # prints out players move options excluding the room they are in
  @rooms.each_with_index do |room, number|
    puts "[#{number + 1}] Move to #{room.name}" unless number == @current_room_index
  end
  # gets player input
  input = gets.chomp
  pause(0.5)
  # confirms if the user input is the same as the current_room_index
  if input.to_i - 1 == @current_room_index
    puts "You are already in #{current_room.name} stupid"
    pause(2)
  # checks that the input is a number in the room_id
  elsif @room_id.include?(input.to_i)
  # if so, updates the @current_room_index so the player moves
    @current_room_index = input.to_i - 1
  # print out message confirming that they have moved room
    puts "\nYou have moved to #{current_room.name}"
    pause(1)
    puts "#{current_room.description}"
    puts "\n"
    pause(4)
  # if user types q the game will quit
  elsif input.downcase == "q"
    @game_complete = true
  # for anything else, there's "I don't know that command"
  else
    puts "\nI don't know that command\n\n"
    pause(1)
    player_move
  end
end

def look_at
  pause(0.5)
  puts "\nWhat would you like to look at?"
  pause(1)
  puts "[I] Inventory item"
  puts "[R] Room item"

  input = gets.chomp
  pause(0.5)
  if input.downcase == "i"
    inventory_description

  elsif input.downcase == "r"
    puts "I need to added room items"

  elsif input.downcase == "q"
    @game_complete = true
  
  else 
    puts "I don't know that command"
    look_at
  end


end


def inventory_items
  puts "\nHere are your inventory items;"
  pause(1)
    @inventory.each_with_index do |item_name, item_index|
    print "[#{item_index + 1}] #{item_name.name}\n"
  end
end


def inventory_description
   puts "Here's your inventory;"
   pause(1)
    @inventory.each_with_index do |item_name, item_index|
      print "[#{item_index + 1}] #{item_name.name} - #{item_name.description}\n"
    end
end

def starting_text
  puts "You wake up in a prison cell. You have no idea how you got there."
  pause(3)
  puts "#{current_room.description}"
  pause(4)
  puts "There's two other cells, one opposite yours, and one next to you."
  pause(4)
  puts "They are at the end of a prison hallway. At the other end is the exit."
  pause(5)
  puts "There's a guard blocking the exit. He's sitting next to a desk and is asleep."
  pause(5)
  @starting_game_text = false
end

class Game

#  generating the rooms

  @cell1 = Room.new("Your Cell", "It's a dirty room with no windows. It contains a bed, chair and desk. There's a mouse in the corner of the room", false)
  @cell2 = Room.new("Cell 2", "It's the prison cell next to yours. It's the same as yours but there's a female prison inside", false)
  @cell3 = Room.new("Cell 3", "It's the prison cell opposite yours. There's nothing in it except a bed, chair and desk", false)
  @prison_hallway = Room.new("the Prison Hallway", "At one end of the Prison Hallway is your cell and two others. At the other end sits a prison guard. The prison guard is asleep", false)

# code for generating items

  @mouse = Item.new("Mouse", "A cute tiny mouse. Who could be afraid of this?", 1, true)
  @desk = Item.new("Desk", "A metal desk. Flat metal top and 4 metal legs.", 2, false)

# initial game state

  @room_items = [@mouse, @desk]
  @inventory = [@mouse, @desk].freeze
  @game_complete = false
  @rooms = [@cell1, @cell2, @cell3, @prison_hallway].freeze
  @current_room_index = 0
  @room_id = [1, 2, 3, 4]
  @starting_game_text = true
  
# Starting game

  while @game_complete == false

    # starting game text to help the player create a mental picture of the environment

    if @starting_game_text == true
      starting_text
    end

    puts "\nYou are in #{current_room.name}"
    puts "What would you like to do?"
    puts "\n"
    # pause(3)

    # print out players command options

    puts "[M] Move to"
    puts "[P] Pick up"
    puts "[L] Look at"
    puts "[I] Inventory"

    # gets user input

    input = gets.chomp

      if input.downcase == "m"
        player_move

      elsif input.downcase == "p"
        # Add code to pick up

      elsif input.downcase == "l"
        look_at

      elsif input.downcase == "i" 
        inventory_items

      elsif input.downcase == "q"
        @game_complete = true

      else
          puts "\nI don't know that command\n\n"
      end

  end

end


play = Game.new
play
