class Room

  attr_accessor(:name, :description, :isLocked)

  def initialize(name, description, isLocked)
    @name = name
    @description = description
    @isLocked = isLocked
  end

end

class Item
  attr_accessor(:name, :description, :item_id, :canBePickedUp, :isPickedUp)

  def initialize(name, description, item_id, canBePickedUp)
    @name = name
    @description = description
    @item_id = item_id
    @canBePickedUp = canBePickedUp
    @isPickedUp = false
  end
end

# starting text that's only applied at the beginning of the game

def starting_text
  slow_type("You wake up in a prison cell. You have no idea how you got there.")
  slow_type("#{current_room.description}")
  slow_type("There's two other cells, one opposite yours, and one next to you.")
  slow_type("They are at the end of a prison hallway. At the other end is the exit.")
  slow_type("There's a guard blocking the exit. He's sitting next to a desk and is asleep.")
  @starting_game_text = false
end

# pause method to give the player the option to read the text 

def pause(input)
  $stdout.flush
  sleep input
end

# makes the words type out on screen

def slow_type(text)
  @debug = true
  if !@debug
    text.each_char {|c| putc c ; sleep 0.04; $stdout.flush }
    pause(1)
    puts "\n"
  else
    puts text
  end
end

# details about the current room the player is in

def current_room 
  @rooms[@current_room_index]
end

def current_room_items
  @current_room_items = @items[@current_room_index]
  @current_room_items.each_with_index do |item_name, number|
    puts "[#{number + 1}] #{item_name.name}"
  end
end

def room_items_description
  @current_room_items = @items[@current_room_index]
  slow_type("\nHere's what's in #{current_room.name};\n\n")
  @current_room_items.each_with_index do |room_item_name, room_item_index|
    print "[#{room_item_index + 1}] #{room_item_name.name} - #{room_item_name.description}\n"
  end
end

# Player actions code

def player_move
  slow_type("\nWhere would you like to move to?\n")
  # prints out players move options excluding the room they are in
  @rooms.each_with_index do |room, number|
    puts "[#{number + 1}] Move to #{room.name}" unless number == @current_room_index
  end
  # gets player input
  input = gets.chomp
  pause(0.5)
  # confirms if the user input is the same as the current_room_index

  if input.to_i - 1 == @current_room_index

    slow_type("\nYou are already in #{current_room.name} stupid")
    pause(1)

  # checks that the input is a number in the room_id and whether the room is not locked

  elsif @room_id.include?(input.to_i) && !current_room.isLocked
    # if so, updates the @current_room_index so the player moves

    @current_room_index = input.to_i - 1

  # print out message confirming that they have moved room

    slow_type("\nYou have moved to #{current_room.name}")
    slow_type("#{current_room.description}")

  elsif @room_id.include?(input.to_i) && current_room.isLocked

    puts "The room is locked, you'll need to find a way out"
  
  # if user types q the game will quit

  elsif input.downcase == "q"
    @game_complete = true

  # for anything else, there's "I don't know that command"
  else
    slow_type("I don't know that command\n")
    player_move
  end
end

def look_at
  pause(0.5)
  slow_type("\nWhat would you like to look at?\n\n")
  puts "[I] Inventory item"
  puts "[R] Whats in the room"

  input = gets.chomp
  pause(0.5)
  if input.downcase == "i"
    inventory_description

  elsif input.downcase == "r"
    room_items_description

  elsif input.downcase == "q"
    @game_complete = true
  
  else 
    slow_type("\nI don't know that command")
    look_at
  end


end

# STILL NEED TO MAKE IT SO YOU CANNOT ENTER AN INCORRECT INPUT

def pick_up
  slow_type("\nHere's what's in #{current_room.name};\n")
  current_room_items
  slow_type("\nWhat would you like to pick up?\n")
  input = gets.chomp.to_i
    if (@current_room_items[input - 1].canBePickedUp != true)
        slow_type("\nYou cannot pick that up")
    else
      slow_type("\nYou have picked up a #{@items[@current_room_index][input - 1].name}")
      @inventory << @current_room_items[input - 1]
      @items[@current_room_index].delete_at(input - 1)
    end
end

# players inventory

def inventory_items
  if @inventory == [] 
    puts "You do not have any items in your inventory"
  else
    slow_type("\nHere are your inventory items;\n")
      @inventory.each_with_index do |item_name, item_index|
      print "[#{item_index + 1}] #{item_name.name}\n"
    end
  end
end

def inventory_description
  if @inventory == [] 
    puts "You do not have any items in your inventory"
  else
   slow_type("\nHere's your inventory;\n")
    @inventory.each_with_index do |item_name, item_index|
      print "[#{item_index + 1}] #{item_name.name} - #{item_name.description}\n"
    end
  end
end

# needs to print the items in the inventory
# you will need to be able to select one and then use it with another object
# the object will either be in your inventory, or in the room 

def use_item
  @items_to_use = []
  @item_indexes = []
  if @inventory == [] 
    puts "You do not have any items in your inventory"
  else
    slow_type("\nHere are your inventory items;\n")
      @inventory.each_with_index do |item_name, item_index|
      @item_indexes << item_index + 1
      print "[#{item_index + 1}] #{item_name.name}\n"
    end
    puts "What would you like to use?"
    input = gets.chomp.to_i
    if @item_indexes.include?(input)
      @items_to_use << @inventory[input - 1]
      if @items_to_use[0].name == "Bobby Pin" && @current_room_index == 0
        @cell1.isLocked = false
        puts "You have used the booby pin to pick the lock on your cell. You genlty open the door so you do not wake the guard"
      else
        puts "You cannot use those items together"
      end
    else
      puts "I don't know that command"
    end
  end
end
class Game

# code for generating items

  @mouse = Item.new("Mouse", "A cute tiny mouse. Who could be afraid of this?", 1, true)
  @desk = Item.new("Desk", "A metal desk. Flat metal top and 4 metal legs.", 2, false)
  @chair = Item.new("Chair", "A metal chair with 4 legs", 3, false)
  @bed = Item.new("Bed", "A metal bed with a thin pillow and a tatty waffer thin blanket", 4, false)
  @cheese_sandwich = Item.new("Cheese Sandwich", "A mouldy cheese sandwich. No human would want to eat this", 5, true)
  @prison_guard = Item.new("Prison Guard", "He's a large man, clearly been eating too many pies", 6, false)
  @prison_keys = Item.new("Prison Keys", "A bunch of keys that open all the cells and the cell room main door", 7, true)
  @bobby_pin = Item.new("Bobby Pin", "Good for holding back hair and picking locks", 8, true)

#  generating the rooms

  @cell1 = Room.new("Your Cell", "It's a dirty room with no windows. It contains a bed, chair and desk. There's a mouse in the corner of the room.", true)
  @cell2 = Room.new("Cell 2", "It's the prison cell next to yours. It's the same as yours but there's a female prison inside.", false)
  @cell3 = Room.new("Cell 3", "It's the prison cell opposite yours. It open with nothing in it except a bed, chair and desk. On the desk appears to be a sandwich", false)
  @prison_hallway = Room.new("the Prison Hallway", "At one end of the Prison Hallway is your cell and two others. At the other end sits a prison guard. The prison guard is asleep.", false)

# initial game state

  @inventory = []
  @game_complete = false
  @rooms = [@cell1, @cell2, @cell3, @prison_hallway].freeze
  @current_room_index = 0
  @room_id = [1, 2, 3, 4]
  @starting_game_text = true

  @cell1_items = [@mouse, @desk, @chair, @bed, @bobby_pin]
  @cell2_items = [@desk, @chair, @bed]
  @cell3_items = [@desk, @chair, @bed, @cheese_sandwich]
  @prison_hallway_items = [@desk, @prison_guard, @prison_keys]

  @items = [@cell1_items, @cell2_items, @cell3_items, @prison_hallway_items]
  
# Starting game

  while @game_complete == false

    # starting game text to help the player create a mental picture of the environment

    if @starting_game_text == true
      starting_text
    end

    slow_type("\nYou are in #{current_room.name}")
    slow_type("What would you like to do?\n")

    # print out players command options

    puts "[M] Move to"
    puts "[P] Pick up"
    puts "[L] Look at"
    puts "[I] Inventory"
    puts "[U] Use item"

    # gets user input

    input = gets.chomp

      if input.downcase == "m"
        player_move

      elsif input.downcase == "p"
        pick_up

      elsif input.downcase == "l"
        look_at

      elsif input.downcase == "i" 
        inventory_items

      elsif input.downcase == "u"
        use_item

      elsif input.downcase == "q"
        @game_complete = true

      else
        slow_type("\nI don't know that command\n")
      end

  end

end


play = Game.new
play